// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: segcore.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_segcore_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_segcore_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "schema.pb.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_segcore_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_segcore_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_segcore_2eproto;
namespace milvus {
namespace proto {
namespace segcore {
class CollectionIndexMeta;
struct CollectionIndexMetaDefaultTypeInternal;
extern CollectionIndexMetaDefaultTypeInternal _CollectionIndexMeta_default_instance_;
class FieldIndexMeta;
struct FieldIndexMetaDefaultTypeInternal;
extern FieldIndexMetaDefaultTypeInternal _FieldIndexMeta_default_instance_;
class InsertRecord;
struct InsertRecordDefaultTypeInternal;
extern InsertRecordDefaultTypeInternal _InsertRecord_default_instance_;
class LoadFieldMeta;
struct LoadFieldMetaDefaultTypeInternal;
extern LoadFieldMetaDefaultTypeInternal _LoadFieldMeta_default_instance_;
class LoadSegmentMeta;
struct LoadSegmentMetaDefaultTypeInternal;
extern LoadSegmentMetaDefaultTypeInternal _LoadSegmentMeta_default_instance_;
class RetrieveResults;
struct RetrieveResultsDefaultTypeInternal;
extern RetrieveResultsDefaultTypeInternal _RetrieveResults_default_instance_;
}  // namespace segcore
}  // namespace proto
}  // namespace milvus
PROTOBUF_NAMESPACE_OPEN
template<> ::milvus::proto::segcore::CollectionIndexMeta* Arena::CreateMaybeMessage<::milvus::proto::segcore::CollectionIndexMeta>(Arena*);
template<> ::milvus::proto::segcore::FieldIndexMeta* Arena::CreateMaybeMessage<::milvus::proto::segcore::FieldIndexMeta>(Arena*);
template<> ::milvus::proto::segcore::InsertRecord* Arena::CreateMaybeMessage<::milvus::proto::segcore::InsertRecord>(Arena*);
template<> ::milvus::proto::segcore::LoadFieldMeta* Arena::CreateMaybeMessage<::milvus::proto::segcore::LoadFieldMeta>(Arena*);
template<> ::milvus::proto::segcore::LoadSegmentMeta* Arena::CreateMaybeMessage<::milvus::proto::segcore::LoadSegmentMeta>(Arena*);
template<> ::milvus::proto::segcore::RetrieveResults* Arena::CreateMaybeMessage<::milvus::proto::segcore::RetrieveResults>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace milvus {
namespace proto {
namespace segcore {

// ===================================================================

class RetrieveResults final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.segcore.RetrieveResults) */ {
 public:
  inline RetrieveResults() : RetrieveResults(nullptr) {}
  ~RetrieveResults() override;
  explicit PROTOBUF_CONSTEXPR RetrieveResults(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RetrieveResults(const RetrieveResults& from);
  RetrieveResults(RetrieveResults&& from) noexcept
    : RetrieveResults() {
    *this = ::std::move(from);
  }

  inline RetrieveResults& operator=(const RetrieveResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetrieveResults& operator=(RetrieveResults&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RetrieveResults& default_instance() {
    return *internal_default_instance();
  }
  static inline const RetrieveResults* internal_default_instance() {
    return reinterpret_cast<const RetrieveResults*>(
               &_RetrieveResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RetrieveResults& a, RetrieveResults& b) {
    a.Swap(&b);
  }
  inline void Swap(RetrieveResults* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RetrieveResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RetrieveResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RetrieveResults>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RetrieveResults& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RetrieveResults& from) {
    RetrieveResults::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetrieveResults* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.segcore.RetrieveResults";
  }
  protected:
  explicit RetrieveResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 2,
    kFieldsDataFieldNumber = 3,
    kIdsFieldNumber = 1,
  };
  // repeated int64 offset = 2;
  int offset_size() const;
  private:
  int _internal_offset_size() const;
  public:
  void clear_offset();
  private:
  int64_t _internal_offset(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_offset() const;
  void _internal_add_offset(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_offset();
  public:
  int64_t offset(int index) const;
  void set_offset(int index, int64_t value);
  void add_offset(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      offset() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_offset();

  // repeated .milvus.proto.schema.FieldData fields_data = 3;
  int fields_data_size() const;
  private:
  int _internal_fields_data_size() const;
  public:
  void clear_fields_data();
  ::milvus::proto::schema::FieldData* mutable_fields_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >*
      mutable_fields_data();
  private:
  const ::milvus::proto::schema::FieldData& _internal_fields_data(int index) const;
  ::milvus::proto::schema::FieldData* _internal_add_fields_data();
  public:
  const ::milvus::proto::schema::FieldData& fields_data(int index) const;
  ::milvus::proto::schema::FieldData* add_fields_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >&
      fields_data() const;

  // .milvus.proto.schema.IDs ids = 1;
  bool has_ids() const;
  private:
  bool _internal_has_ids() const;
  public:
  void clear_ids();
  const ::milvus::proto::schema::IDs& ids() const;
  PROTOBUF_NODISCARD ::milvus::proto::schema::IDs* release_ids();
  ::milvus::proto::schema::IDs* mutable_ids();
  void set_allocated_ids(::milvus::proto::schema::IDs* ids);
  private:
  const ::milvus::proto::schema::IDs& _internal_ids() const;
  ::milvus::proto::schema::IDs* _internal_mutable_ids();
  public:
  void unsafe_arena_set_allocated_ids(
      ::milvus::proto::schema::IDs* ids);
  ::milvus::proto::schema::IDs* unsafe_arena_release_ids();

  // @@protoc_insertion_point(class_scope:milvus.proto.segcore.RetrieveResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > offset_;
    mutable std::atomic<int> _offset_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData > fields_data_;
    ::milvus::proto::schema::IDs* ids_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_segcore_2eproto;
};
// -------------------------------------------------------------------

class LoadFieldMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.segcore.LoadFieldMeta) */ {
 public:
  inline LoadFieldMeta() : LoadFieldMeta(nullptr) {}
  ~LoadFieldMeta() override;
  explicit PROTOBUF_CONSTEXPR LoadFieldMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadFieldMeta(const LoadFieldMeta& from);
  LoadFieldMeta(LoadFieldMeta&& from) noexcept
    : LoadFieldMeta() {
    *this = ::std::move(from);
  }

  inline LoadFieldMeta& operator=(const LoadFieldMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadFieldMeta& operator=(LoadFieldMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadFieldMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadFieldMeta* internal_default_instance() {
    return reinterpret_cast<const LoadFieldMeta*>(
               &_LoadFieldMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoadFieldMeta& a, LoadFieldMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadFieldMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadFieldMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadFieldMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadFieldMeta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadFieldMeta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoadFieldMeta& from) {
    LoadFieldMeta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadFieldMeta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.segcore.LoadFieldMeta";
  }
  protected:
  explicit LoadFieldMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinTimestampFieldNumber = 1,
    kMaxTimestampFieldNumber = 2,
    kRowCountFieldNumber = 3,
  };
  // int64 min_timestamp = 1;
  void clear_min_timestamp();
  int64_t min_timestamp() const;
  void set_min_timestamp(int64_t value);
  private:
  int64_t _internal_min_timestamp() const;
  void _internal_set_min_timestamp(int64_t value);
  public:

  // int64 max_timestamp = 2;
  void clear_max_timestamp();
  int64_t max_timestamp() const;
  void set_max_timestamp(int64_t value);
  private:
  int64_t _internal_max_timestamp() const;
  void _internal_set_max_timestamp(int64_t value);
  public:

  // int64 row_count = 3;
  void clear_row_count();
  int64_t row_count() const;
  void set_row_count(int64_t value);
  private:
  int64_t _internal_row_count() const;
  void _internal_set_row_count(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.segcore.LoadFieldMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t min_timestamp_;
    int64_t max_timestamp_;
    int64_t row_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_segcore_2eproto;
};
// -------------------------------------------------------------------

class LoadSegmentMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.segcore.LoadSegmentMeta) */ {
 public:
  inline LoadSegmentMeta() : LoadSegmentMeta(nullptr) {}
  ~LoadSegmentMeta() override;
  explicit PROTOBUF_CONSTEXPR LoadSegmentMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadSegmentMeta(const LoadSegmentMeta& from);
  LoadSegmentMeta(LoadSegmentMeta&& from) noexcept
    : LoadSegmentMeta() {
    *this = ::std::move(from);
  }

  inline LoadSegmentMeta& operator=(const LoadSegmentMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadSegmentMeta& operator=(LoadSegmentMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadSegmentMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadSegmentMeta* internal_default_instance() {
    return reinterpret_cast<const LoadSegmentMeta*>(
               &_LoadSegmentMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoadSegmentMeta& a, LoadSegmentMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadSegmentMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadSegmentMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadSegmentMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadSegmentMeta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadSegmentMeta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoadSegmentMeta& from) {
    LoadSegmentMeta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadSegmentMeta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.segcore.LoadSegmentMeta";
  }
  protected:
  explicit LoadSegmentMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetasFieldNumber = 1,
    kTotalSizeFieldNumber = 2,
  };
  // repeated .milvus.proto.segcore.LoadFieldMeta metas = 1;
  int metas_size() const;
  private:
  int _internal_metas_size() const;
  public:
  void clear_metas();
  ::milvus::proto::segcore::LoadFieldMeta* mutable_metas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::segcore::LoadFieldMeta >*
      mutable_metas();
  private:
  const ::milvus::proto::segcore::LoadFieldMeta& _internal_metas(int index) const;
  ::milvus::proto::segcore::LoadFieldMeta* _internal_add_metas();
  public:
  const ::milvus::proto::segcore::LoadFieldMeta& metas(int index) const;
  ::milvus::proto::segcore::LoadFieldMeta* add_metas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::segcore::LoadFieldMeta >&
      metas() const;

  // int64 total_size = 2;
  void clear_total_size();
  int64_t total_size() const;
  void set_total_size(int64_t value);
  private:
  int64_t _internal_total_size() const;
  void _internal_set_total_size(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.segcore.LoadSegmentMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::segcore::LoadFieldMeta > metas_;
    int64_t total_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_segcore_2eproto;
};
// -------------------------------------------------------------------

class InsertRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.segcore.InsertRecord) */ {
 public:
  inline InsertRecord() : InsertRecord(nullptr) {}
  ~InsertRecord() override;
  explicit PROTOBUF_CONSTEXPR InsertRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InsertRecord(const InsertRecord& from);
  InsertRecord(InsertRecord&& from) noexcept
    : InsertRecord() {
    *this = ::std::move(from);
  }

  inline InsertRecord& operator=(const InsertRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertRecord& operator=(InsertRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InsertRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const InsertRecord* internal_default_instance() {
    return reinterpret_cast<const InsertRecord*>(
               &_InsertRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InsertRecord& a, InsertRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InsertRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InsertRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InsertRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InsertRecord& from) {
    InsertRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.segcore.InsertRecord";
  }
  protected:
  explicit InsertRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsDataFieldNumber = 1,
    kNumRowsFieldNumber = 2,
  };
  // repeated .milvus.proto.schema.FieldData fields_data = 1;
  int fields_data_size() const;
  private:
  int _internal_fields_data_size() const;
  public:
  void clear_fields_data();
  ::milvus::proto::schema::FieldData* mutable_fields_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >*
      mutable_fields_data();
  private:
  const ::milvus::proto::schema::FieldData& _internal_fields_data(int index) const;
  ::milvus::proto::schema::FieldData* _internal_add_fields_data();
  public:
  const ::milvus::proto::schema::FieldData& fields_data(int index) const;
  ::milvus::proto::schema::FieldData* add_fields_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >&
      fields_data() const;

  // int64 num_rows = 2;
  void clear_num_rows();
  int64_t num_rows() const;
  void set_num_rows(int64_t value);
  private:
  int64_t _internal_num_rows() const;
  void _internal_set_num_rows(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.segcore.InsertRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData > fields_data_;
    int64_t num_rows_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_segcore_2eproto;
};
// -------------------------------------------------------------------

class FieldIndexMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.segcore.FieldIndexMeta) */ {
 public:
  inline FieldIndexMeta() : FieldIndexMeta(nullptr) {}
  ~FieldIndexMeta() override;
  explicit PROTOBUF_CONSTEXPR FieldIndexMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldIndexMeta(const FieldIndexMeta& from);
  FieldIndexMeta(FieldIndexMeta&& from) noexcept
    : FieldIndexMeta() {
    *this = ::std::move(from);
  }

  inline FieldIndexMeta& operator=(const FieldIndexMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldIndexMeta& operator=(FieldIndexMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldIndexMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldIndexMeta* internal_default_instance() {
    return reinterpret_cast<const FieldIndexMeta*>(
               &_FieldIndexMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FieldIndexMeta& a, FieldIndexMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldIndexMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldIndexMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FieldIndexMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FieldIndexMeta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FieldIndexMeta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FieldIndexMeta& from) {
    FieldIndexMeta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldIndexMeta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.segcore.FieldIndexMeta";
  }
  protected:
  explicit FieldIndexMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeParamsFieldNumber = 4,
    kIndexParamsFieldNumber = 5,
    kUserIndexParamsFieldNumber = 7,
    kIndexNameFieldNumber = 3,
    kFieldIDFieldNumber = 1,
    kCollectionIDFieldNumber = 2,
    kIsAutoIndexFieldNumber = 6,
  };
  // repeated .milvus.proto.common.KeyValuePair type_params = 4;
  int type_params_size() const;
  private:
  int _internal_type_params_size() const;
  public:
  void clear_type_params();
  ::milvus::proto::common::KeyValuePair* mutable_type_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_type_params();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_type_params(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_type_params();
  public:
  const ::milvus::proto::common::KeyValuePair& type_params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_type_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      type_params() const;

  // repeated .milvus.proto.common.KeyValuePair index_params = 5;
  int index_params_size() const;
  private:
  int _internal_index_params_size() const;
  public:
  void clear_index_params();
  ::milvus::proto::common::KeyValuePair* mutable_index_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_index_params();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_index_params(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_index_params();
  public:
  const ::milvus::proto::common::KeyValuePair& index_params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_index_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      index_params() const;

  // repeated .milvus.proto.common.KeyValuePair user_index_params = 7;
  int user_index_params_size() const;
  private:
  int _internal_user_index_params_size() const;
  public:
  void clear_user_index_params();
  ::milvus::proto::common::KeyValuePair* mutable_user_index_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
      mutable_user_index_params();
  private:
  const ::milvus::proto::common::KeyValuePair& _internal_user_index_params(int index) const;
  ::milvus::proto::common::KeyValuePair* _internal_add_user_index_params();
  public:
  const ::milvus::proto::common::KeyValuePair& user_index_params(int index) const;
  ::milvus::proto::common::KeyValuePair* add_user_index_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
      user_index_params() const;

  // string index_name = 3;
  void clear_index_name();
  const std::string& index_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_name();
  PROTOBUF_NODISCARD std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // int64 fieldID = 1;
  void clear_fieldid();
  int64_t fieldid() const;
  void set_fieldid(int64_t value);
  private:
  int64_t _internal_fieldid() const;
  void _internal_set_fieldid(int64_t value);
  public:

  // int64 collectionID = 2;
  void clear_collectionid();
  int64_t collectionid() const;
  void set_collectionid(int64_t value);
  private:
  int64_t _internal_collectionid() const;
  void _internal_set_collectionid(int64_t value);
  public:

  // bool is_auto_index = 6;
  void clear_is_auto_index();
  bool is_auto_index() const;
  void set_is_auto_index(bool value);
  private:
  bool _internal_is_auto_index() const;
  void _internal_set_is_auto_index(bool value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.segcore.FieldIndexMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > type_params_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > index_params_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair > user_index_params_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
    int64_t fieldid_;
    int64_t collectionid_;
    bool is_auto_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_segcore_2eproto;
};
// -------------------------------------------------------------------

class CollectionIndexMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:milvus.proto.segcore.CollectionIndexMeta) */ {
 public:
  inline CollectionIndexMeta() : CollectionIndexMeta(nullptr) {}
  ~CollectionIndexMeta() override;
  explicit PROTOBUF_CONSTEXPR CollectionIndexMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollectionIndexMeta(const CollectionIndexMeta& from);
  CollectionIndexMeta(CollectionIndexMeta&& from) noexcept
    : CollectionIndexMeta() {
    *this = ::std::move(from);
  }

  inline CollectionIndexMeta& operator=(const CollectionIndexMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectionIndexMeta& operator=(CollectionIndexMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollectionIndexMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollectionIndexMeta* internal_default_instance() {
    return reinterpret_cast<const CollectionIndexMeta*>(
               &_CollectionIndexMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CollectionIndexMeta& a, CollectionIndexMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectionIndexMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollectionIndexMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CollectionIndexMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CollectionIndexMeta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CollectionIndexMeta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CollectionIndexMeta& from) {
    CollectionIndexMeta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectionIndexMeta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "milvus.proto.segcore.CollectionIndexMeta";
  }
  protected:
  explicit CollectionIndexMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexMetasFieldNumber = 2,
    kMaxIndexRowCountFieldNumber = 1,
  };
  // repeated .milvus.proto.segcore.FieldIndexMeta index_metas = 2;
  int index_metas_size() const;
  private:
  int _internal_index_metas_size() const;
  public:
  void clear_index_metas();
  ::milvus::proto::segcore::FieldIndexMeta* mutable_index_metas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::segcore::FieldIndexMeta >*
      mutable_index_metas();
  private:
  const ::milvus::proto::segcore::FieldIndexMeta& _internal_index_metas(int index) const;
  ::milvus::proto::segcore::FieldIndexMeta* _internal_add_index_metas();
  public:
  const ::milvus::proto::segcore::FieldIndexMeta& index_metas(int index) const;
  ::milvus::proto::segcore::FieldIndexMeta* add_index_metas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::segcore::FieldIndexMeta >&
      index_metas() const;

  // int64 maxIndexRowCount = 1;
  void clear_maxindexrowcount();
  int64_t maxindexrowcount() const;
  void set_maxindexrowcount(int64_t value);
  private:
  int64_t _internal_maxindexrowcount() const;
  void _internal_set_maxindexrowcount(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:milvus.proto.segcore.CollectionIndexMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::segcore::FieldIndexMeta > index_metas_;
    int64_t maxindexrowcount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_segcore_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RetrieveResults

// .milvus.proto.schema.IDs ids = 1;
inline bool RetrieveResults::_internal_has_ids() const {
  return this != internal_default_instance() && _impl_.ids_ != nullptr;
}
inline bool RetrieveResults::has_ids() const {
  return _internal_has_ids();
}
inline const ::milvus::proto::schema::IDs& RetrieveResults::_internal_ids() const {
  const ::milvus::proto::schema::IDs* p = _impl_.ids_;
  return p != nullptr ? *p : reinterpret_cast<const ::milvus::proto::schema::IDs&>(
      ::milvus::proto::schema::_IDs_default_instance_);
}
inline const ::milvus::proto::schema::IDs& RetrieveResults::ids() const {
  // @@protoc_insertion_point(field_get:milvus.proto.segcore.RetrieveResults.ids)
  return _internal_ids();
}
inline void RetrieveResults::unsafe_arena_set_allocated_ids(
    ::milvus::proto::schema::IDs* ids) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ids_);
  }
  _impl_.ids_ = ids;
  if (ids) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:milvus.proto.segcore.RetrieveResults.ids)
}
inline ::milvus::proto::schema::IDs* RetrieveResults::release_ids() {
  
  ::milvus::proto::schema::IDs* temp = _impl_.ids_;
  _impl_.ids_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::milvus::proto::schema::IDs* RetrieveResults::unsafe_arena_release_ids() {
  // @@protoc_insertion_point(field_release:milvus.proto.segcore.RetrieveResults.ids)
  
  ::milvus::proto::schema::IDs* temp = _impl_.ids_;
  _impl_.ids_ = nullptr;
  return temp;
}
inline ::milvus::proto::schema::IDs* RetrieveResults::_internal_mutable_ids() {
  
  if (_impl_.ids_ == nullptr) {
    auto* p = CreateMaybeMessage<::milvus::proto::schema::IDs>(GetArenaForAllocation());
    _impl_.ids_ = p;
  }
  return _impl_.ids_;
}
inline ::milvus::proto::schema::IDs* RetrieveResults::mutable_ids() {
  ::milvus::proto::schema::IDs* _msg = _internal_mutable_ids();
  // @@protoc_insertion_point(field_mutable:milvus.proto.segcore.RetrieveResults.ids)
  return _msg;
}
inline void RetrieveResults::set_allocated_ids(::milvus::proto::schema::IDs* ids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ids_);
  }
  if (ids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ids));
    if (message_arena != submessage_arena) {
      ids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ids, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ids_ = ids;
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.segcore.RetrieveResults.ids)
}

// repeated int64 offset = 2;
inline int RetrieveResults::_internal_offset_size() const {
  return _impl_.offset_.size();
}
inline int RetrieveResults::offset_size() const {
  return _internal_offset_size();
}
inline void RetrieveResults::clear_offset() {
  _impl_.offset_.Clear();
}
inline int64_t RetrieveResults::_internal_offset(int index) const {
  return _impl_.offset_.Get(index);
}
inline int64_t RetrieveResults::offset(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.segcore.RetrieveResults.offset)
  return _internal_offset(index);
}
inline void RetrieveResults::set_offset(int index, int64_t value) {
  _impl_.offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:milvus.proto.segcore.RetrieveResults.offset)
}
inline void RetrieveResults::_internal_add_offset(int64_t value) {
  _impl_.offset_.Add(value);
}
inline void RetrieveResults::add_offset(int64_t value) {
  _internal_add_offset(value);
  // @@protoc_insertion_point(field_add:milvus.proto.segcore.RetrieveResults.offset)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
RetrieveResults::_internal_offset() const {
  return _impl_.offset_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
RetrieveResults::offset() const {
  // @@protoc_insertion_point(field_list:milvus.proto.segcore.RetrieveResults.offset)
  return _internal_offset();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
RetrieveResults::_internal_mutable_offset() {
  return &_impl_.offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
RetrieveResults::mutable_offset() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.segcore.RetrieveResults.offset)
  return _internal_mutable_offset();
}

// repeated .milvus.proto.schema.FieldData fields_data = 3;
inline int RetrieveResults::_internal_fields_data_size() const {
  return _impl_.fields_data_.size();
}
inline int RetrieveResults::fields_data_size() const {
  return _internal_fields_data_size();
}
inline ::milvus::proto::schema::FieldData* RetrieveResults::mutable_fields_data(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.segcore.RetrieveResults.fields_data)
  return _impl_.fields_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >*
RetrieveResults::mutable_fields_data() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.segcore.RetrieveResults.fields_data)
  return &_impl_.fields_data_;
}
inline const ::milvus::proto::schema::FieldData& RetrieveResults::_internal_fields_data(int index) const {
  return _impl_.fields_data_.Get(index);
}
inline const ::milvus::proto::schema::FieldData& RetrieveResults::fields_data(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.segcore.RetrieveResults.fields_data)
  return _internal_fields_data(index);
}
inline ::milvus::proto::schema::FieldData* RetrieveResults::_internal_add_fields_data() {
  return _impl_.fields_data_.Add();
}
inline ::milvus::proto::schema::FieldData* RetrieveResults::add_fields_data() {
  ::milvus::proto::schema::FieldData* _add = _internal_add_fields_data();
  // @@protoc_insertion_point(field_add:milvus.proto.segcore.RetrieveResults.fields_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >&
RetrieveResults::fields_data() const {
  // @@protoc_insertion_point(field_list:milvus.proto.segcore.RetrieveResults.fields_data)
  return _impl_.fields_data_;
}

// -------------------------------------------------------------------

// LoadFieldMeta

// int64 min_timestamp = 1;
inline void LoadFieldMeta::clear_min_timestamp() {
  _impl_.min_timestamp_ = int64_t{0};
}
inline int64_t LoadFieldMeta::_internal_min_timestamp() const {
  return _impl_.min_timestamp_;
}
inline int64_t LoadFieldMeta::min_timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.segcore.LoadFieldMeta.min_timestamp)
  return _internal_min_timestamp();
}
inline void LoadFieldMeta::_internal_set_min_timestamp(int64_t value) {
  
  _impl_.min_timestamp_ = value;
}
inline void LoadFieldMeta::set_min_timestamp(int64_t value) {
  _internal_set_min_timestamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.segcore.LoadFieldMeta.min_timestamp)
}

// int64 max_timestamp = 2;
inline void LoadFieldMeta::clear_max_timestamp() {
  _impl_.max_timestamp_ = int64_t{0};
}
inline int64_t LoadFieldMeta::_internal_max_timestamp() const {
  return _impl_.max_timestamp_;
}
inline int64_t LoadFieldMeta::max_timestamp() const {
  // @@protoc_insertion_point(field_get:milvus.proto.segcore.LoadFieldMeta.max_timestamp)
  return _internal_max_timestamp();
}
inline void LoadFieldMeta::_internal_set_max_timestamp(int64_t value) {
  
  _impl_.max_timestamp_ = value;
}
inline void LoadFieldMeta::set_max_timestamp(int64_t value) {
  _internal_set_max_timestamp(value);
  // @@protoc_insertion_point(field_set:milvus.proto.segcore.LoadFieldMeta.max_timestamp)
}

// int64 row_count = 3;
inline void LoadFieldMeta::clear_row_count() {
  _impl_.row_count_ = int64_t{0};
}
inline int64_t LoadFieldMeta::_internal_row_count() const {
  return _impl_.row_count_;
}
inline int64_t LoadFieldMeta::row_count() const {
  // @@protoc_insertion_point(field_get:milvus.proto.segcore.LoadFieldMeta.row_count)
  return _internal_row_count();
}
inline void LoadFieldMeta::_internal_set_row_count(int64_t value) {
  
  _impl_.row_count_ = value;
}
inline void LoadFieldMeta::set_row_count(int64_t value) {
  _internal_set_row_count(value);
  // @@protoc_insertion_point(field_set:milvus.proto.segcore.LoadFieldMeta.row_count)
}

// -------------------------------------------------------------------

// LoadSegmentMeta

// repeated .milvus.proto.segcore.LoadFieldMeta metas = 1;
inline int LoadSegmentMeta::_internal_metas_size() const {
  return _impl_.metas_.size();
}
inline int LoadSegmentMeta::metas_size() const {
  return _internal_metas_size();
}
inline void LoadSegmentMeta::clear_metas() {
  _impl_.metas_.Clear();
}
inline ::milvus::proto::segcore::LoadFieldMeta* LoadSegmentMeta::mutable_metas(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.segcore.LoadSegmentMeta.metas)
  return _impl_.metas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::segcore::LoadFieldMeta >*
LoadSegmentMeta::mutable_metas() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.segcore.LoadSegmentMeta.metas)
  return &_impl_.metas_;
}
inline const ::milvus::proto::segcore::LoadFieldMeta& LoadSegmentMeta::_internal_metas(int index) const {
  return _impl_.metas_.Get(index);
}
inline const ::milvus::proto::segcore::LoadFieldMeta& LoadSegmentMeta::metas(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.segcore.LoadSegmentMeta.metas)
  return _internal_metas(index);
}
inline ::milvus::proto::segcore::LoadFieldMeta* LoadSegmentMeta::_internal_add_metas() {
  return _impl_.metas_.Add();
}
inline ::milvus::proto::segcore::LoadFieldMeta* LoadSegmentMeta::add_metas() {
  ::milvus::proto::segcore::LoadFieldMeta* _add = _internal_add_metas();
  // @@protoc_insertion_point(field_add:milvus.proto.segcore.LoadSegmentMeta.metas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::segcore::LoadFieldMeta >&
LoadSegmentMeta::metas() const {
  // @@protoc_insertion_point(field_list:milvus.proto.segcore.LoadSegmentMeta.metas)
  return _impl_.metas_;
}

// int64 total_size = 2;
inline void LoadSegmentMeta::clear_total_size() {
  _impl_.total_size_ = int64_t{0};
}
inline int64_t LoadSegmentMeta::_internal_total_size() const {
  return _impl_.total_size_;
}
inline int64_t LoadSegmentMeta::total_size() const {
  // @@protoc_insertion_point(field_get:milvus.proto.segcore.LoadSegmentMeta.total_size)
  return _internal_total_size();
}
inline void LoadSegmentMeta::_internal_set_total_size(int64_t value) {
  
  _impl_.total_size_ = value;
}
inline void LoadSegmentMeta::set_total_size(int64_t value) {
  _internal_set_total_size(value);
  // @@protoc_insertion_point(field_set:milvus.proto.segcore.LoadSegmentMeta.total_size)
}

// -------------------------------------------------------------------

// InsertRecord

// repeated .milvus.proto.schema.FieldData fields_data = 1;
inline int InsertRecord::_internal_fields_data_size() const {
  return _impl_.fields_data_.size();
}
inline int InsertRecord::fields_data_size() const {
  return _internal_fields_data_size();
}
inline ::milvus::proto::schema::FieldData* InsertRecord::mutable_fields_data(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.segcore.InsertRecord.fields_data)
  return _impl_.fields_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >*
InsertRecord::mutable_fields_data() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.segcore.InsertRecord.fields_data)
  return &_impl_.fields_data_;
}
inline const ::milvus::proto::schema::FieldData& InsertRecord::_internal_fields_data(int index) const {
  return _impl_.fields_data_.Get(index);
}
inline const ::milvus::proto::schema::FieldData& InsertRecord::fields_data(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.segcore.InsertRecord.fields_data)
  return _internal_fields_data(index);
}
inline ::milvus::proto::schema::FieldData* InsertRecord::_internal_add_fields_data() {
  return _impl_.fields_data_.Add();
}
inline ::milvus::proto::schema::FieldData* InsertRecord::add_fields_data() {
  ::milvus::proto::schema::FieldData* _add = _internal_add_fields_data();
  // @@protoc_insertion_point(field_add:milvus.proto.segcore.InsertRecord.fields_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::schema::FieldData >&
InsertRecord::fields_data() const {
  // @@protoc_insertion_point(field_list:milvus.proto.segcore.InsertRecord.fields_data)
  return _impl_.fields_data_;
}

// int64 num_rows = 2;
inline void InsertRecord::clear_num_rows() {
  _impl_.num_rows_ = int64_t{0};
}
inline int64_t InsertRecord::_internal_num_rows() const {
  return _impl_.num_rows_;
}
inline int64_t InsertRecord::num_rows() const {
  // @@protoc_insertion_point(field_get:milvus.proto.segcore.InsertRecord.num_rows)
  return _internal_num_rows();
}
inline void InsertRecord::_internal_set_num_rows(int64_t value) {
  
  _impl_.num_rows_ = value;
}
inline void InsertRecord::set_num_rows(int64_t value) {
  _internal_set_num_rows(value);
  // @@protoc_insertion_point(field_set:milvus.proto.segcore.InsertRecord.num_rows)
}

// -------------------------------------------------------------------

// FieldIndexMeta

// int64 fieldID = 1;
inline void FieldIndexMeta::clear_fieldid() {
  _impl_.fieldid_ = int64_t{0};
}
inline int64_t FieldIndexMeta::_internal_fieldid() const {
  return _impl_.fieldid_;
}
inline int64_t FieldIndexMeta::fieldid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.segcore.FieldIndexMeta.fieldID)
  return _internal_fieldid();
}
inline void FieldIndexMeta::_internal_set_fieldid(int64_t value) {
  
  _impl_.fieldid_ = value;
}
inline void FieldIndexMeta::set_fieldid(int64_t value) {
  _internal_set_fieldid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.segcore.FieldIndexMeta.fieldID)
}

// int64 collectionID = 2;
inline void FieldIndexMeta::clear_collectionid() {
  _impl_.collectionid_ = int64_t{0};
}
inline int64_t FieldIndexMeta::_internal_collectionid() const {
  return _impl_.collectionid_;
}
inline int64_t FieldIndexMeta::collectionid() const {
  // @@protoc_insertion_point(field_get:milvus.proto.segcore.FieldIndexMeta.collectionID)
  return _internal_collectionid();
}
inline void FieldIndexMeta::_internal_set_collectionid(int64_t value) {
  
  _impl_.collectionid_ = value;
}
inline void FieldIndexMeta::set_collectionid(int64_t value) {
  _internal_set_collectionid(value);
  // @@protoc_insertion_point(field_set:milvus.proto.segcore.FieldIndexMeta.collectionID)
}

// string index_name = 3;
inline void FieldIndexMeta::clear_index_name() {
  _impl_.index_name_.ClearToEmpty();
}
inline const std::string& FieldIndexMeta::index_name() const {
  // @@protoc_insertion_point(field_get:milvus.proto.segcore.FieldIndexMeta.index_name)
  return _internal_index_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FieldIndexMeta::set_index_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.index_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:milvus.proto.segcore.FieldIndexMeta.index_name)
}
inline std::string* FieldIndexMeta::mutable_index_name() {
  std::string* _s = _internal_mutable_index_name();
  // @@protoc_insertion_point(field_mutable:milvus.proto.segcore.FieldIndexMeta.index_name)
  return _s;
}
inline const std::string& FieldIndexMeta::_internal_index_name() const {
  return _impl_.index_name_.Get();
}
inline void FieldIndexMeta::_internal_set_index_name(const std::string& value) {
  
  _impl_.index_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FieldIndexMeta::_internal_mutable_index_name() {
  
  return _impl_.index_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FieldIndexMeta::release_index_name() {
  // @@protoc_insertion_point(field_release:milvus.proto.segcore.FieldIndexMeta.index_name)
  return _impl_.index_name_.Release();
}
inline void FieldIndexMeta::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  _impl_.index_name_.SetAllocated(index_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.index_name_.IsDefault()) {
    _impl_.index_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:milvus.proto.segcore.FieldIndexMeta.index_name)
}

// repeated .milvus.proto.common.KeyValuePair type_params = 4;
inline int FieldIndexMeta::_internal_type_params_size() const {
  return _impl_.type_params_.size();
}
inline int FieldIndexMeta::type_params_size() const {
  return _internal_type_params_size();
}
inline ::milvus::proto::common::KeyValuePair* FieldIndexMeta::mutable_type_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.segcore.FieldIndexMeta.type_params)
  return _impl_.type_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
FieldIndexMeta::mutable_type_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.segcore.FieldIndexMeta.type_params)
  return &_impl_.type_params_;
}
inline const ::milvus::proto::common::KeyValuePair& FieldIndexMeta::_internal_type_params(int index) const {
  return _impl_.type_params_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& FieldIndexMeta::type_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.segcore.FieldIndexMeta.type_params)
  return _internal_type_params(index);
}
inline ::milvus::proto::common::KeyValuePair* FieldIndexMeta::_internal_add_type_params() {
  return _impl_.type_params_.Add();
}
inline ::milvus::proto::common::KeyValuePair* FieldIndexMeta::add_type_params() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_type_params();
  // @@protoc_insertion_point(field_add:milvus.proto.segcore.FieldIndexMeta.type_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
FieldIndexMeta::type_params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.segcore.FieldIndexMeta.type_params)
  return _impl_.type_params_;
}

// repeated .milvus.proto.common.KeyValuePair index_params = 5;
inline int FieldIndexMeta::_internal_index_params_size() const {
  return _impl_.index_params_.size();
}
inline int FieldIndexMeta::index_params_size() const {
  return _internal_index_params_size();
}
inline ::milvus::proto::common::KeyValuePair* FieldIndexMeta::mutable_index_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.segcore.FieldIndexMeta.index_params)
  return _impl_.index_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
FieldIndexMeta::mutable_index_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.segcore.FieldIndexMeta.index_params)
  return &_impl_.index_params_;
}
inline const ::milvus::proto::common::KeyValuePair& FieldIndexMeta::_internal_index_params(int index) const {
  return _impl_.index_params_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& FieldIndexMeta::index_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.segcore.FieldIndexMeta.index_params)
  return _internal_index_params(index);
}
inline ::milvus::proto::common::KeyValuePair* FieldIndexMeta::_internal_add_index_params() {
  return _impl_.index_params_.Add();
}
inline ::milvus::proto::common::KeyValuePair* FieldIndexMeta::add_index_params() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_index_params();
  // @@protoc_insertion_point(field_add:milvus.proto.segcore.FieldIndexMeta.index_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
FieldIndexMeta::index_params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.segcore.FieldIndexMeta.index_params)
  return _impl_.index_params_;
}

// bool is_auto_index = 6;
inline void FieldIndexMeta::clear_is_auto_index() {
  _impl_.is_auto_index_ = false;
}
inline bool FieldIndexMeta::_internal_is_auto_index() const {
  return _impl_.is_auto_index_;
}
inline bool FieldIndexMeta::is_auto_index() const {
  // @@protoc_insertion_point(field_get:milvus.proto.segcore.FieldIndexMeta.is_auto_index)
  return _internal_is_auto_index();
}
inline void FieldIndexMeta::_internal_set_is_auto_index(bool value) {
  
  _impl_.is_auto_index_ = value;
}
inline void FieldIndexMeta::set_is_auto_index(bool value) {
  _internal_set_is_auto_index(value);
  // @@protoc_insertion_point(field_set:milvus.proto.segcore.FieldIndexMeta.is_auto_index)
}

// repeated .milvus.proto.common.KeyValuePair user_index_params = 7;
inline int FieldIndexMeta::_internal_user_index_params_size() const {
  return _impl_.user_index_params_.size();
}
inline int FieldIndexMeta::user_index_params_size() const {
  return _internal_user_index_params_size();
}
inline ::milvus::proto::common::KeyValuePair* FieldIndexMeta::mutable_user_index_params(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.segcore.FieldIndexMeta.user_index_params)
  return _impl_.user_index_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >*
FieldIndexMeta::mutable_user_index_params() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.segcore.FieldIndexMeta.user_index_params)
  return &_impl_.user_index_params_;
}
inline const ::milvus::proto::common::KeyValuePair& FieldIndexMeta::_internal_user_index_params(int index) const {
  return _impl_.user_index_params_.Get(index);
}
inline const ::milvus::proto::common::KeyValuePair& FieldIndexMeta::user_index_params(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.segcore.FieldIndexMeta.user_index_params)
  return _internal_user_index_params(index);
}
inline ::milvus::proto::common::KeyValuePair* FieldIndexMeta::_internal_add_user_index_params() {
  return _impl_.user_index_params_.Add();
}
inline ::milvus::proto::common::KeyValuePair* FieldIndexMeta::add_user_index_params() {
  ::milvus::proto::common::KeyValuePair* _add = _internal_add_user_index_params();
  // @@protoc_insertion_point(field_add:milvus.proto.segcore.FieldIndexMeta.user_index_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::common::KeyValuePair >&
FieldIndexMeta::user_index_params() const {
  // @@protoc_insertion_point(field_list:milvus.proto.segcore.FieldIndexMeta.user_index_params)
  return _impl_.user_index_params_;
}

// -------------------------------------------------------------------

// CollectionIndexMeta

// int64 maxIndexRowCount = 1;
inline void CollectionIndexMeta::clear_maxindexrowcount() {
  _impl_.maxindexrowcount_ = int64_t{0};
}
inline int64_t CollectionIndexMeta::_internal_maxindexrowcount() const {
  return _impl_.maxindexrowcount_;
}
inline int64_t CollectionIndexMeta::maxindexrowcount() const {
  // @@protoc_insertion_point(field_get:milvus.proto.segcore.CollectionIndexMeta.maxIndexRowCount)
  return _internal_maxindexrowcount();
}
inline void CollectionIndexMeta::_internal_set_maxindexrowcount(int64_t value) {
  
  _impl_.maxindexrowcount_ = value;
}
inline void CollectionIndexMeta::set_maxindexrowcount(int64_t value) {
  _internal_set_maxindexrowcount(value);
  // @@protoc_insertion_point(field_set:milvus.proto.segcore.CollectionIndexMeta.maxIndexRowCount)
}

// repeated .milvus.proto.segcore.FieldIndexMeta index_metas = 2;
inline int CollectionIndexMeta::_internal_index_metas_size() const {
  return _impl_.index_metas_.size();
}
inline int CollectionIndexMeta::index_metas_size() const {
  return _internal_index_metas_size();
}
inline void CollectionIndexMeta::clear_index_metas() {
  _impl_.index_metas_.Clear();
}
inline ::milvus::proto::segcore::FieldIndexMeta* CollectionIndexMeta::mutable_index_metas(int index) {
  // @@protoc_insertion_point(field_mutable:milvus.proto.segcore.CollectionIndexMeta.index_metas)
  return _impl_.index_metas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::segcore::FieldIndexMeta >*
CollectionIndexMeta::mutable_index_metas() {
  // @@protoc_insertion_point(field_mutable_list:milvus.proto.segcore.CollectionIndexMeta.index_metas)
  return &_impl_.index_metas_;
}
inline const ::milvus::proto::segcore::FieldIndexMeta& CollectionIndexMeta::_internal_index_metas(int index) const {
  return _impl_.index_metas_.Get(index);
}
inline const ::milvus::proto::segcore::FieldIndexMeta& CollectionIndexMeta::index_metas(int index) const {
  // @@protoc_insertion_point(field_get:milvus.proto.segcore.CollectionIndexMeta.index_metas)
  return _internal_index_metas(index);
}
inline ::milvus::proto::segcore::FieldIndexMeta* CollectionIndexMeta::_internal_add_index_metas() {
  return _impl_.index_metas_.Add();
}
inline ::milvus::proto::segcore::FieldIndexMeta* CollectionIndexMeta::add_index_metas() {
  ::milvus::proto::segcore::FieldIndexMeta* _add = _internal_add_index_metas();
  // @@protoc_insertion_point(field_add:milvus.proto.segcore.CollectionIndexMeta.index_metas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::milvus::proto::segcore::FieldIndexMeta >&
CollectionIndexMeta::index_metas() const {
  // @@protoc_insertion_point(field_list:milvus.proto.segcore.CollectionIndexMeta.index_metas)
  return _impl_.index_metas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace segcore
}  // namespace proto
}  // namespace milvus

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_segcore_2eproto
